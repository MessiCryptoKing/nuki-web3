//  Util Snippets
import { capitalize } from "../utils.js";
export const useStateObject = (useTs, stateName, initial) => {
    return {
        function: `const [${stateName}, set${capitalize(stateName)}] = useState${useTs ? `<${capitalize(stateName)}>` : ``}(${initial});`
    };
};
export const stateType = (stateName, type, single) => {
    return {
        single: single,
        function: `${single ?
            `type ${capitalize(stateName)} = ${type};`
            : `type ${capitalize(stateName)} = {
  ${type}
};`}`
    };
};
export const handleChangeObjectState = (useTs, stateName, handle, actions) => {
    return {
        name: `handle${capitalize(stateName)}Change`,
        type: `(e: any) => void`,
        handle: handle,
        function: `
  const handle${capitalize(stateName)}Change = (event${useTs ? `: React.ChangeEvent<HTMLInputElement>` : ""}) => {
    const { name, value } = event.target
    set${capitalize(stateName)}((prevState) => {
      return {
        ...prevState,
        [name]: value
      }
    })
    ${actions.map((action) => action)}
  }`
    };
};
export const handleChangeArray = (useTs, stateName, data, handle) => {
    return {
        name: `handle${capitalize(stateName)}Change`,
        type: `(data: any) => void`,
        handle: handle,
        function: `  const handle${capitalize(stateName)}Change = (data${useTs ? ": any" : ""}) => {
    set${capitalize(stateName)}(prevState => [${data}, ...prevState])
  }`
    };
};
export const handleClickEvent = (useTs, stateName, name, inputs, func) => {
    return {
        name: `handle${capitalize(stateName)}Click`,
        type: `(e: any) => void`,
        function: `
  const handle${capitalize(stateName)}Click = async (event${useTs ? ": any" : ""}) => {
    const data = await ${name}(${inputs.map(({ name }) => "state?." + name).join(" ,")})
    const outcome = data === "${name} failed" ? "failed" : \`success: \${JSON.stringify(data)}\`
    ${func}
  }
`
    };
};
export const logs = (key, value) => {
    return (`
 <div className="log-box">
    <p className="log-text">${key}: ${value}</p>
 </div>
`);
};
