// ${dataTypes[type]}
const returnData = (res) => {
    if (res.length === 0)
        return "";
    return `return data;`;
};
const stateMut = (stateMutability, inputs) => stateMutability === "payable" ? `${inputs.length > 0 ? ", " : ""}{ value: ethers.utils.parseEther("0.00")}` : "";
export default function functionTemplate(name, inputs, outputs, stateMutability, inline, useTs) {
    const inputMap = (ts) => inputs.map(({ name, type }) => `${name}${ts ? ": string" : ""}`).join(", ");
    return `
/* 
---~~~=*%$}>    ${name}    <{$%&=~~~---

Inputs:  ${inputs.map(({ name, type }) => `${name}: ${type}`).join(", ")}

*/
${inline ? "" :
        `
import { getContract } from '../utils/utils'
${stateMutability === "payable" ? `import { ethers } from 'ethers';` : ""}
`}

${inline ? "export" : "export default"} async function ${name}(${inputMap(useTs)}) {
  try {
    const { ethereum } = window;
    const contract = getContract(ethereum);
    ${returnData(outputs) ? "const data = await" : "await"} contract.${name}(${inputs.length > 0 ? inputs
        .map(({ name }) => name)
        .join(", ") : ""}${stateMut(stateMutability, inputs)});
    ${returnData(outputs)}
  }
  catch (error) {
    console.log(error);
    return "${name} failed";
  }
}`;
}
